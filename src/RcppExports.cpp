// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// metrl2_cpp
Rcpp::NumericMatrix metrl2_cpp(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B);
RcppExport SEXP _ExtrFunReg_metrl2_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(metrl2_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// metrl2b_cpp
Rcpp::NumericMatrix metrl2b_cpp(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B);
RcppExport SEXP _ExtrFunReg_metrl2b_cpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(metrl2b_cpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// kern
double kern(double t, int k);
RcppExport SEXP _ExtrFunReg_kern(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kern(t, k));
    return rcpp_result_gen;
END_RCPP
}
// J_tau
double J_tau(double tau, double t);
RcppExport SEXP _ExtrFunReg_J_tau(SEXP tauSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(J_tau(tau, t));
    return rcpp_result_gen;
END_RCPP
}
// kern_CDF
double kern_CDF(double t, int k);
RcppExport SEXP _ExtrFunReg_kern_CDF(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_CDF(t, k));
    return rcpp_result_gen;
END_RCPP
}
// cdf_ksm_single
double cdf_ksm_single(Rcpp::NumericVector D, Rcpp::NumericVector Y, double y, Rcpp::NumericVector h, int n, int kernCDFI);
RcppExport SEXP _ExtrFunReg_cdf_ksm_single(SEXP DSEXP, SEXP YSEXP, SEXP ySEXP, SEXP hSEXP, SEXP nSEXP, SEXP kernCDFISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type kernCDFI(kernCDFISEXP);
    rcpp_result_gen = Rcpp::wrap(cdf_ksm_single(D, Y, y, h, n, kernCDFI));
    return rcpp_result_gen;
END_RCPP
}
// multiplyMatrices
Rcpp::NumericMatrix multiplyMatrices(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B);
RcppExport SEXP _ExtrFunReg_multiplyMatrices(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(multiplyMatrices(A, B));
    return rcpp_result_gen;
END_RCPP
}
// multiplyMatrixVector
Rcpp::NumericVector multiplyMatrixVector(Rcpp::NumericMatrix M, Rcpp::NumericVector v);
RcppExport SEXP _ExtrFunReg_multiplyMatrixVector(SEXP MSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(multiplyMatrixVector(M, v));
    return rcpp_result_gen;
END_RCPP
}
// solveLinearSystem
Rcpp::List solveLinearSystem(Rcpp::NumericMatrix A, Rcpp::NumericVector b);
RcppExport SEXP _ExtrFunReg_solveLinearSystem(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(solveLinearSystem(A, b));
    return rcpp_result_gen;
END_RCPP
}
// llsm_single_cpp
Rcpp::NumericMatrix llsm_single_cpp(Rcpp::NumericMatrix C, Rcpp::NumericMatrix Cnew, Rcpp::NumericMatrix D, Rcpp::NumericVector Y, Rcpp::NumericVector h, int n, int m, int J, int kernI);
RcppExport SEXP _ExtrFunReg_llsm_single_cpp(SEXP CSEXP, SEXP CnewSEXP, SEXP DSEXP, SEXP YSEXP, SEXP hSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP, SEXP kernISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Cnew(CnewSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type kernI(kernISEXP);
    rcpp_result_gen = Rcpp::wrap(llsm_single_cpp(C, Cnew, D, Y, h, n, m, J, kernI));
    return rcpp_result_gen;
END_RCPP
}
// llsm_cv_single_cpp
void llsm_cv_single_cpp(Rcpp::NumericMatrix C, Rcpp::NumericMatrix D, Rcpp::NumericVector Y, int n, int J, Rcpp::NumericMatrix H, int nH, Rcpp::NumericVector CV, Rcpp::NumericVector CVB, int nCV, int kernI);
RcppExport SEXP _ExtrFunReg_llsm_cv_single_cpp(SEXP CSEXP, SEXP DSEXP, SEXP YSEXP, SEXP nSEXP, SEXP JSEXP, SEXP HSEXP, SEXP nHSEXP, SEXP CVSEXP, SEXP CVBSEXP, SEXP nCVSEXP, SEXP kernISEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type nH(nHSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type CV(CVSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type CVB(CVBSEXP);
    Rcpp::traits::input_parameter< int >::type nCV(nCVSEXP);
    Rcpp::traits::input_parameter< int >::type kernI(kernISEXP);
    llsm_cv_single_cpp(C, D, Y, n, J, H, nH, CV, CVB, nCV, kernI);
    return R_NilValue;
END_RCPP
}
// efr_single
Rcpp::NumericMatrix efr_single(Rcpp::NumericMatrix C, Rcpp::NumericMatrix Cnew, Rcpp::NumericMatrix D, Rcpp::NumericVector Y, Rcpp::NumericVector h, Rcpp::NumericVector hF, int n, int m, int J, int kernI, double tau, int kernCDFI);
RcppExport SEXP _ExtrFunReg_efr_single(SEXP CSEXP, SEXP CnewSEXP, SEXP DSEXP, SEXP YSEXP, SEXP hSEXP, SEXP hFSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP, SEXP kernISEXP, SEXP tauSEXP, SEXP kernCDFISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Cnew(CnewSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type hF(hFSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type kernI(kernISEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type kernCDFI(kernCDFISEXP);
    rcpp_result_gen = Rcpp::wrap(efr_single(C, Cnew, D, Y, h, hF, n, m, J, kernI, tau, kernCDFI));
    return rcpp_result_gen;
END_RCPP
}
// efr_single_leave
Rcpp::NumericMatrix efr_single_leave(Rcpp::NumericMatrix C, Rcpp::NumericMatrix Cnew, Rcpp::NumericMatrix D, Rcpp::NumericVector Y, Rcpp::NumericVector h, Rcpp::NumericVector hF, int n, int m, int J, int kernI, double tau, int kernCDFI);
RcppExport SEXP _ExtrFunReg_efr_single_leave(SEXP CSEXP, SEXP CnewSEXP, SEXP DSEXP, SEXP YSEXP, SEXP hSEXP, SEXP hFSEXP, SEXP nSEXP, SEXP mSEXP, SEXP JSEXP, SEXP kernISEXP, SEXP tauSEXP, SEXP kernCDFISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Cnew(CnewSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type D(DSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type h(hSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type hF(hFSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type kernI(kernISEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type kernCDFI(kernCDFISEXP);
    rcpp_result_gen = Rcpp::wrap(efr_single_leave(C, Cnew, D, Y, h, hF, n, m, J, kernI, tau, kernCDFI));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ExtrFunReg_metrl2_cpp", (DL_FUNC) &_ExtrFunReg_metrl2_cpp, 2},
    {"_ExtrFunReg_metrl2b_cpp", (DL_FUNC) &_ExtrFunReg_metrl2b_cpp, 2},
    {"_ExtrFunReg_kern", (DL_FUNC) &_ExtrFunReg_kern, 2},
    {"_ExtrFunReg_J_tau", (DL_FUNC) &_ExtrFunReg_J_tau, 2},
    {"_ExtrFunReg_kern_CDF", (DL_FUNC) &_ExtrFunReg_kern_CDF, 2},
    {"_ExtrFunReg_cdf_ksm_single", (DL_FUNC) &_ExtrFunReg_cdf_ksm_single, 6},
    {"_ExtrFunReg_multiplyMatrices", (DL_FUNC) &_ExtrFunReg_multiplyMatrices, 2},
    {"_ExtrFunReg_multiplyMatrixVector", (DL_FUNC) &_ExtrFunReg_multiplyMatrixVector, 2},
    {"_ExtrFunReg_solveLinearSystem", (DL_FUNC) &_ExtrFunReg_solveLinearSystem, 2},
    {"_ExtrFunReg_llsm_single_cpp", (DL_FUNC) &_ExtrFunReg_llsm_single_cpp, 9},
    {"_ExtrFunReg_llsm_cv_single_cpp", (DL_FUNC) &_ExtrFunReg_llsm_cv_single_cpp, 11},
    {"_ExtrFunReg_efr_single", (DL_FUNC) &_ExtrFunReg_efr_single, 12},
    {"_ExtrFunReg_efr_single_leave", (DL_FUNC) &_ExtrFunReg_efr_single_leave, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_ExtrFunReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
